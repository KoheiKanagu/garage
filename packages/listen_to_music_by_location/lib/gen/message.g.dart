// Copyright 2024 kingu.dev. All rights reserved.
// Autogenerated from Pigeon (v19.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

List<Object?> wrapResponse({Object? result, PlatformException? error, bool empty = false}) {
  if (empty) {
    return <Object?>[];
  }
  if (error == null) {
    return <Object?>[result];
  }
  return <Object?>[error.code, error.message, error.details];
}

enum MusicAuthorizationStatus {
  notDetermined,
  denied,
  restricted,
  authorized,
}

enum RegionState {
  unknown,
  inside,
  outside,
}

enum AuthorizationStatus {
  notDetermined,
  restricted,
  denied,
  authorizedAlways,
  authorizedWhenInUse,
}

/// どのMapViewから呼ばれたかを判別するために利用する
enum MapViewType {
  mapPage,
  locamusicDetailPage,
}

class CircleAnnotation {
  CircleAnnotation({
    required this.identifier,
    required this.latitude,
    required this.longitude,
    required this.title,
    required this.circleDistance,
  });

  String identifier;

  double latitude;

  double longitude;

  String title;

  double circleDistance;

  Object encode() {
    return <Object?>[
      identifier,
      latitude,
      longitude,
      title,
      circleDistance,
    ];
  }

  static CircleAnnotation decode(Object result) {
    result as List<Object?>;
    return CircleAnnotation(
      identifier: result[0]! as String,
      latitude: result[1]! as double,
      longitude: result[2]! as double,
      title: result[3]! as String,
      circleDistance: result[4]! as double,
    );
  }
}

class SongDetails {
  SongDetails({
    required this.id,
    required this.title,
    required this.artistName,
    this.artworkUrl,
    this.songUrl,
  });

  String id;

  String title;

  String artistName;

  String? artworkUrl;

  String? songUrl;

  Object encode() {
    return <Object?>[
      id,
      title,
      artistName,
      artworkUrl,
      songUrl,
    ];
  }

  static SongDetails decode(Object result) {
    result as List<Object?>;
    return SongDetails(
      id: result[0]! as String,
      title: result[1]! as String,
      artistName: result[2]! as String,
      artworkUrl: result[3] as String?,
      songUrl: result[4] as String?,
    );
  }
}

/// https://developer.apple.com/documentation/corelocation/clcircularregion
class Region {
  Region({
    required this.identifier,
    required this.latitude,
    required this.longitude,
    required this.radius,
  });

  /// Locamusic documentId
  String identifier;

  double latitude;

  double longitude;

  /// meters
  double radius;

  Object encode() {
    return <Object?>[
      identifier,
      latitude,
      longitude,
      radius,
    ];
  }

  static Region decode(Object result) {
    result as List<Object?>;
    return Region(
      identifier: result[0]! as String,
      latitude: result[1]! as double,
      longitude: result[2]! as double,
      radius: result[3]! as double,
    );
  }
}

class _MapPageMapViewCodec extends StandardMessageCodec {
  const _MapPageMapViewCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is CircleAnnotation) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return CircleAnnotation.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class MapPageMapView {
  /// Constructor for [MapPageMapView].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  MapPageMapView({BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : __pigeon_binaryMessenger = binaryMessenger,
        __pigeon_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? __pigeon_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _MapPageMapViewCodec();

  final String __pigeon_messageChannelSuffix;

  Future<void> setMapRegion({required double latitude, required double longitude, required double meters,}) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.listen_to_music_by_location.MapPageMapView.setMapRegion$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[latitude, longitude, meters]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  /// https://developer.apple.com/documentation/mapkit/mkmapview/1451889-addannotations
  Future<void> addAnnotations(List<CircleAnnotation?> annotations) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.listen_to_music_by_location.MapPageMapView.addAnnotations$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[annotations]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  /// https://developer.apple.com/documentation/mapkit/mkmapview/1452518-addoverlays
  Future<void> addAnnotationOverlays(List<CircleAnnotation?> annotations) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.listen_to_music_by_location.MapPageMapView.addAnnotationOverlays$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[annotations]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  /// https://developer.apple.com/documentation/mapkit/mkmapview/1452130-removeannotations
  Future<void> removeAnnotations(List<String?> identifiers) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.listen_to_music_by_location.MapPageMapView.removeAnnotations$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[identifiers]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  /// https://developer.apple.com/documentation/mapkit/mkmapview/1452719-removeoverlays
  Future<void> removeAnnotationOverlays(List<String?> identifiers) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.listen_to_music_by_location.MapPageMapView.removeAnnotationOverlays$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[identifiers]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  /// https://developer.apple.com/documentation/mapkit/mkmapview/1452593-annotations
  Future<List<String?>> getAnnotations() async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.listen_to_music_by_location.MapPageMapView.getAnnotations$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as List<Object?>?)!.cast<String?>();
    }
  }

  /// https://developer.apple.com/documentation/mapkit/mkmapview/1452309-showannotations
  Future<void> showAnnotations() async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.listen_to_music_by_location.MapPageMapView.showAnnotations$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }
}

class _LocamusicDetailPageMapViewCodec extends StandardMessageCodec {
  const _LocamusicDetailPageMapViewCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is CircleAnnotation) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return CircleAnnotation.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class LocamusicDetailPageMapView {
  /// Constructor for [LocamusicDetailPageMapView].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  LocamusicDetailPageMapView({BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : __pigeon_binaryMessenger = binaryMessenger,
        __pigeon_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? __pigeon_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _LocamusicDetailPageMapViewCodec();

  final String __pigeon_messageChannelSuffix;

  Future<void> setMapRegion({required double latitude, required double longitude, required double meters,}) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.listen_to_music_by_location.LocamusicDetailPageMapView.setMapRegion$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[latitude, longitude, meters]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  /// https://developer.apple.com/documentation/mapkit/mkmapview/1451889-addannotations
  Future<void> addAnnotations(List<CircleAnnotation?> annotations) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.listen_to_music_by_location.LocamusicDetailPageMapView.addAnnotations$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[annotations]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  /// https://developer.apple.com/documentation/mapkit/mkmapview/1452518-addoverlays
  Future<void> addAnnotationOverlays(List<CircleAnnotation?> annotations) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.listen_to_music_by_location.LocamusicDetailPageMapView.addAnnotationOverlays$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[annotations]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  /// https://developer.apple.com/documentation/mapkit/mkmapview/1452130-removeannotations
  Future<void> removeAnnotations(List<String?> identifiers) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.listen_to_music_by_location.LocamusicDetailPageMapView.removeAnnotations$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[identifiers]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  /// https://developer.apple.com/documentation/mapkit/mkmapview/1452719-removeoverlays
  Future<void> removeAnnotationOverlays(List<String?> identifiers) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.listen_to_music_by_location.LocamusicDetailPageMapView.removeAnnotationOverlays$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[identifiers]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  /// https://developer.apple.com/documentation/mapkit/mkmapview/1452593-annotations
  Future<List<String?>> getAnnotations() async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.listen_to_music_by_location.LocamusicDetailPageMapView.getAnnotations$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as List<Object?>?)!.cast<String?>();
    }
  }

  /// https://developer.apple.com/documentation/mapkit/mkmapview/1452309-showannotations
  Future<void> showAnnotations() async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.listen_to_music_by_location.LocamusicDetailPageMapView.showAnnotations$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }
}

class _MusicKitCodec extends StandardMessageCodec {
  const _MusicKitCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is SongDetails) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return SongDetails.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class MusicKit {
  /// Constructor for [MusicKit].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  MusicKit({BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : __pigeon_binaryMessenger = binaryMessenger,
        __pigeon_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? __pigeon_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _MusicKitCodec();

  final String __pigeon_messageChannelSuffix;

  /// Status
  /// https://developer.apple.com/documentation/musickit/musicauthorization/status
  Future<MusicAuthorizationStatus> requestPermission() async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.listen_to_music_by_location.MusicKit.requestPermission$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return MusicAuthorizationStatus.values[__pigeon_replyList[0]! as int];
    }
  }

  /// Status
  /// https://developer.apple.com/documentation/musickit/musicauthorization/status
  Future<MusicAuthorizationStatus> currentPermissionStatus() async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.listen_to_music_by_location.MusicKit.currentPermissionStatus$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return MusicAuthorizationStatus.values[__pigeon_replyList[0]! as int];
    }
  }

  Future<void> play(String id) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.listen_to_music_by_location.MusicKit.play$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[id]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<SongDetails> songDetails(String id, {int artworkSize = 512}) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.listen_to_music_by_location.MusicKit.songDetails$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[id, artworkSize]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as SongDetails?)!;
    }
  }

  /// 音の出力先がビルトインスピーカーかどうか判定
  ///
  /// https://developer.apple.com/documentation/avfaudio/avaudiosession/port/1616561-builtinspeaker
  Future<bool> audioSessionBuiltInSpeaker() async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.listen_to_music_by_location.MusicKit.audioSessionBuiltInSpeaker$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as bool?)!;
    }
  }
}

class _LocationManagerCodec extends StandardMessageCodec {
  const _LocationManagerCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is Region) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is Region) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return Region.decode(readValue(buffer)!);
      case 129: 
        return Region.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class LocationManager {
  /// Constructor for [LocationManager].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  LocationManager({BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : __pigeon_binaryMessenger = binaryMessenger,
        __pigeon_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? __pigeon_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _LocationManagerCodec();

  final String __pigeon_messageChannelSuffix;

  /// https://developer.apple.com/documentation/corelocation/cllocationmanager/1620562-requestwheninuseauthorization
  /// https://developer.apple.com/documentation/corelocation/cllocationmanager/1620551-requestalwaysauthorization
  Future<void> requestAuthorization({required bool always}) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.listen_to_music_by_location.LocationManager.requestAuthorization$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[always]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  /// Status
  /// https://developer.apple.com/documentation/corelocation/clauthorizationstatus
  Future<AuthorizationStatus> currentPermissionStatus() async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.listen_to_music_by_location.LocationManager.currentPermissionStatus$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return AuthorizationStatus.values[__pigeon_replyList[0]! as int];
    }
  }

  /// CLRegion.identifier
  /// https://developer.apple.com/documentation/corelocation/cllocationmanager/1423790-monitoredregions
  Future<List<Region?>> monitoredRegions() async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.listen_to_music_by_location.LocationManager.monitoredRegions$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as List<Object?>?)!.cast<Region?>();
    }
  }

  /// https://developer.apple.com/documentation/corelocation/cllocationmanager/1423656-startmonitoring
  Future<void> startMonitoring(Region region) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.listen_to_music_by_location.LocationManager.startMonitoring$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[region]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  /// https://developer.apple.com/documentation/corelocation/cllocationmanager/1423840-stopmonitoring
  Future<void> stopMonitoring(Region region) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.listen_to_music_by_location.LocationManager.stopMonitoring$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[region]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }
}

class _LocationManagerDelegateCodec extends StandardMessageCodec {
  const _LocationManagerDelegateCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is Region) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return Region.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

abstract class LocationManagerDelegate {
  static const MessageCodec<Object?> pigeonChannelCodec = _LocationManagerDelegateCodec();

  /// https://developer.apple.com/documentation/corelocation/cllocationmanagerdelegate/1423570-locationmanager
  void didDetermineState(Region region, RegionState state);

  /// https://developer.apple.com/documentation/corelocation/cllocationmanagerdelegate/3563956-locationmanagerdidchangeauthoriz
  void didChangeAuthorization(AuthorizationStatus status);

  /// https://developer.apple.com/documentation/corelocation/cllocationmanagerdelegate/1423842-locationmanager
  /// https://developer.apple.com/documentation/corelocation/cllocationmanagerdelegate/1423720-locationmanager
  void didStartMonitoring(Region region, String? error);

  static void setUp(LocationManagerDelegate? api, {BinaryMessenger? binaryMessenger, String messageChannelSuffix = '',}) {
    messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.listen_to_music_by_location.LocationManagerDelegate.didDetermineState$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.listen_to_music_by_location.LocationManagerDelegate.didDetermineState was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final Region? arg_region = (args[0] as Region?);
          assert(arg_region != null,
              'Argument for dev.flutter.pigeon.listen_to_music_by_location.LocationManagerDelegate.didDetermineState was null, expected non-null Region.');
          final RegionState? arg_state = args[1] == null ? null : RegionState.values[args[1]! as int];
          assert(arg_state != null,
              'Argument for dev.flutter.pigeon.listen_to_music_by_location.LocationManagerDelegate.didDetermineState was null, expected non-null RegionState.');
          try {
            api.didDetermineState(arg_region!, arg_state!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.listen_to_music_by_location.LocationManagerDelegate.didChangeAuthorization$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.listen_to_music_by_location.LocationManagerDelegate.didChangeAuthorization was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final AuthorizationStatus? arg_status = args[0] == null ? null : AuthorizationStatus.values[args[0]! as int];
          assert(arg_status != null,
              'Argument for dev.flutter.pigeon.listen_to_music_by_location.LocationManagerDelegate.didChangeAuthorization was null, expected non-null AuthorizationStatus.');
          try {
            api.didChangeAuthorization(arg_status!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.listen_to_music_by_location.LocationManagerDelegate.didStartMonitoring$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.listen_to_music_by_location.LocationManagerDelegate.didStartMonitoring was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final Region? arg_region = (args[0] as Region?);
          assert(arg_region != null,
              'Argument for dev.flutter.pigeon.listen_to_music_by_location.LocationManagerDelegate.didStartMonitoring was null, expected non-null Region.');
          final String? arg_error = (args[1] as String?);
          try {
            api.didStartMonitoring(arg_region!, arg_error);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }
}

abstract class MapViewDelegate {
  static const MessageCodec<Object?> pigeonChannelCodec = StandardMessageCodec();

  /// on tap MKCircle
  void onTapCircle(MapViewType viewType, String identifier);

  /// on long pressed MKMapView
  void onLongPressedMap(MapViewType viewType, double latitude, double longitude);

  /// https://developer.apple.com/documentation/mapkit/mkmapviewdelegate/1452291-mapviewdidfinishloadingmap
  void mapViewDidFinishLoadingMap(MapViewType viewType);

  static void setUp(MapViewDelegate? api, {BinaryMessenger? binaryMessenger, String messageChannelSuffix = '',}) {
    messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.listen_to_music_by_location.MapViewDelegate.onTapCircle$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.listen_to_music_by_location.MapViewDelegate.onTapCircle was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final MapViewType? arg_viewType = args[0] == null ? null : MapViewType.values[args[0]! as int];
          assert(arg_viewType != null,
              'Argument for dev.flutter.pigeon.listen_to_music_by_location.MapViewDelegate.onTapCircle was null, expected non-null MapViewType.');
          final String? arg_identifier = (args[1] as String?);
          assert(arg_identifier != null,
              'Argument for dev.flutter.pigeon.listen_to_music_by_location.MapViewDelegate.onTapCircle was null, expected non-null String.');
          try {
            api.onTapCircle(arg_viewType!, arg_identifier!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.listen_to_music_by_location.MapViewDelegate.onLongPressedMap$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.listen_to_music_by_location.MapViewDelegate.onLongPressedMap was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final MapViewType? arg_viewType = args[0] == null ? null : MapViewType.values[args[0]! as int];
          assert(arg_viewType != null,
              'Argument for dev.flutter.pigeon.listen_to_music_by_location.MapViewDelegate.onLongPressedMap was null, expected non-null MapViewType.');
          final double? arg_latitude = (args[1] as double?);
          assert(arg_latitude != null,
              'Argument for dev.flutter.pigeon.listen_to_music_by_location.MapViewDelegate.onLongPressedMap was null, expected non-null double.');
          final double? arg_longitude = (args[2] as double?);
          assert(arg_longitude != null,
              'Argument for dev.flutter.pigeon.listen_to_music_by_location.MapViewDelegate.onLongPressedMap was null, expected non-null double.');
          try {
            api.onLongPressedMap(arg_viewType!, arg_latitude!, arg_longitude!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.listen_to_music_by_location.MapViewDelegate.mapViewDidFinishLoadingMap$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.listen_to_music_by_location.MapViewDelegate.mapViewDidFinishLoadingMap was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final MapViewType? arg_viewType = args[0] == null ? null : MapViewType.values[args[0]! as int];
          assert(arg_viewType != null,
              'Argument for dev.flutter.pigeon.listen_to_music_by_location.MapViewDelegate.mapViewDidFinishLoadingMap was null, expected non-null MapViewType.');
          try {
            api.mapViewDidFinishLoadingMap(arg_viewType!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }
}

class OpenSettings {
  /// Constructor for [OpenSettings].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  OpenSettings({BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : __pigeon_binaryMessenger = binaryMessenger,
        __pigeon_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? __pigeon_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = StandardMessageCodec();

  final String __pigeon_messageChannelSuffix;

  /// https://developer.apple.com/documentation/uikit/uiapplication/1623042-opensettingsurlstring
  Future<void> openSettings() async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.listen_to_music_by_location.OpenSettings.openSettings$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }
}
