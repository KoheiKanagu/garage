// Copyright 2024 kingu.dev. All rights reserved.
// Autogenerated from Pigeon (v17.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func createConnectionError(withChannelName channelName: String) -> FlutterError {
  return FlutterError(code: "channel-error", message: "Unable to establish connection on channel: '\(channelName)'.", details: "")
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

enum MusicAuthorizationStatus: Int {
  case notDetermined = 0
  case denied = 1
  case restricted = 2
  case authorized = 3
}

enum RegionState: Int {
  case unknown = 0
  case inside = 1
  case outside = 2
}

enum AuthorizationStatus: Int {
  case notDetermined = 0
  case restricted = 1
  case denied = 2
  case authorizedAlways = 3
  case authorizedWhenInUse = 4
}

/// どのMapViewから呼ばれたかを判別するために利用する
enum MapViewType: Int {
  case mapPage = 0
  case locamusicDetailPage = 1
}

/// Generated class from Pigeon that represents data sent in messages.
struct CircleAnnotation {
  var identifier: String
  var latitude: Double
  var longitude: Double
  var title: String
  var circleDistance: Double

  static func fromList(_ list: [Any?]) -> CircleAnnotation? {
    let identifier = list[0] as! String
    let latitude = list[1] as! Double
    let longitude = list[2] as! Double
    let title = list[3] as! String
    let circleDistance = list[4] as! Double

    return CircleAnnotation(
      identifier: identifier,
      latitude: latitude,
      longitude: longitude,
      title: title,
      circleDistance: circleDistance
    )
  }
  func toList() -> [Any?] {
    return [
      identifier,
      latitude,
      longitude,
      title,
      circleDistance,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct SongDetails {
  var id: String
  var title: String
  var artistName: String
  var artworkUrl: String? = nil
  var songUrl: String? = nil

  static func fromList(_ list: [Any?]) -> SongDetails? {
    let id = list[0] as! String
    let title = list[1] as! String
    let artistName = list[2] as! String
    let artworkUrl: String? = nilOrValue(list[3])
    let songUrl: String? = nilOrValue(list[4])

    return SongDetails(
      id: id,
      title: title,
      artistName: artistName,
      artworkUrl: artworkUrl,
      songUrl: songUrl
    )
  }
  func toList() -> [Any?] {
    return [
      id,
      title,
      artistName,
      artworkUrl,
      songUrl,
    ]
  }
}

/// https://developer.apple.com/documentation/corelocation/clcircularregion
///
/// Generated class from Pigeon that represents data sent in messages.
struct Region {
  /// Locamusic documentId
  var identifier: String
  var latitude: Double
  var longitude: Double
  /// meters
  var radius: Double

  static func fromList(_ list: [Any?]) -> Region? {
    let identifier = list[0] as! String
    let latitude = list[1] as! Double
    let longitude = list[2] as! Double
    let radius = list[3] as! Double

    return Region(
      identifier: identifier,
      latitude: latitude,
      longitude: longitude,
      radius: radius
    )
  }
  func toList() -> [Any?] {
    return [
      identifier,
      latitude,
      longitude,
      radius,
    ]
  }
}

private class MapPageMapViewCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 128:
      return CircleAnnotation.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class MapPageMapViewCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? CircleAnnotation {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class MapPageMapViewCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return MapPageMapViewCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return MapPageMapViewCodecWriter(data: data)
  }
}

class MapPageMapViewCodec: FlutterStandardMessageCodec {
  static let shared = MapPageMapViewCodec(readerWriter: MapPageMapViewCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol MapPageMapView {
  func setMapRegion(latitude: Double, longitude: Double, meters: Double) throws
  /// https://developer.apple.com/documentation/mapkit/mkmapview/1451889-addannotations
  func addAnnotations(annotations: [CircleAnnotation]) throws
  /// https://developer.apple.com/documentation/mapkit/mkmapview/1452518-addoverlays
  func addAnnotationOverlays(annotations: [CircleAnnotation]) throws
  /// https://developer.apple.com/documentation/mapkit/mkmapview/1452130-removeannotations
  func removeAnnotations(identifiers: [String]) throws
  /// https://developer.apple.com/documentation/mapkit/mkmapview/1452719-removeoverlays
  func removeAnnotationOverlays(identifiers: [String]) throws
  /// https://developer.apple.com/documentation/mapkit/mkmapview/1452593-annotations
  func getAnnotations() throws -> [String]
  /// https://developer.apple.com/documentation/mapkit/mkmapview/1452309-showannotations
  func showAnnotations() throws
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class MapPageMapViewSetup {
  /// The codec used by MapPageMapView.
  static var codec: FlutterStandardMessageCodec { MapPageMapViewCodec.shared }
  /// Sets up an instance of `MapPageMapView` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: MapPageMapView?) {
    let setMapRegionChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.listen_to_music_by_location.MapPageMapView.setMapRegion", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setMapRegionChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let latitudeArg = args[0] as! Double
        let longitudeArg = args[1] as! Double
        let metersArg = args[2] as! Double
        do {
          try api.setMapRegion(latitude: latitudeArg, longitude: longitudeArg, meters: metersArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setMapRegionChannel.setMessageHandler(nil)
    }
    /// https://developer.apple.com/documentation/mapkit/mkmapview/1451889-addannotations
    let addAnnotationsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.listen_to_music_by_location.MapPageMapView.addAnnotations", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      addAnnotationsChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let annotationsArg = args[0] as! [CircleAnnotation]
        do {
          try api.addAnnotations(annotations: annotationsArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      addAnnotationsChannel.setMessageHandler(nil)
    }
    /// https://developer.apple.com/documentation/mapkit/mkmapview/1452518-addoverlays
    let addAnnotationOverlaysChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.listen_to_music_by_location.MapPageMapView.addAnnotationOverlays", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      addAnnotationOverlaysChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let annotationsArg = args[0] as! [CircleAnnotation]
        do {
          try api.addAnnotationOverlays(annotations: annotationsArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      addAnnotationOverlaysChannel.setMessageHandler(nil)
    }
    /// https://developer.apple.com/documentation/mapkit/mkmapview/1452130-removeannotations
    let removeAnnotationsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.listen_to_music_by_location.MapPageMapView.removeAnnotations", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      removeAnnotationsChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let identifiersArg = args[0] as! [String]
        do {
          try api.removeAnnotations(identifiers: identifiersArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      removeAnnotationsChannel.setMessageHandler(nil)
    }
    /// https://developer.apple.com/documentation/mapkit/mkmapview/1452719-removeoverlays
    let removeAnnotationOverlaysChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.listen_to_music_by_location.MapPageMapView.removeAnnotationOverlays", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      removeAnnotationOverlaysChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let identifiersArg = args[0] as! [String]
        do {
          try api.removeAnnotationOverlays(identifiers: identifiersArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      removeAnnotationOverlaysChannel.setMessageHandler(nil)
    }
    /// https://developer.apple.com/documentation/mapkit/mkmapview/1452593-annotations
    let getAnnotationsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.listen_to_music_by_location.MapPageMapView.getAnnotations", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getAnnotationsChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getAnnotations()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getAnnotationsChannel.setMessageHandler(nil)
    }
    /// https://developer.apple.com/documentation/mapkit/mkmapview/1452309-showannotations
    let showAnnotationsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.listen_to_music_by_location.MapPageMapView.showAnnotations", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      showAnnotationsChannel.setMessageHandler { _, reply in
        do {
          try api.showAnnotations()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      showAnnotationsChannel.setMessageHandler(nil)
    }
  }
}
private class LocamusicDetailPageMapViewCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 128:
      return CircleAnnotation.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class LocamusicDetailPageMapViewCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? CircleAnnotation {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class LocamusicDetailPageMapViewCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return LocamusicDetailPageMapViewCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return LocamusicDetailPageMapViewCodecWriter(data: data)
  }
}

class LocamusicDetailPageMapViewCodec: FlutterStandardMessageCodec {
  static let shared = LocamusicDetailPageMapViewCodec(readerWriter: LocamusicDetailPageMapViewCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol LocamusicDetailPageMapView {
  func setMapRegion(latitude: Double, longitude: Double, meters: Double) throws
  /// https://developer.apple.com/documentation/mapkit/mkmapview/1451889-addannotations
  func addAnnotations(annotations: [CircleAnnotation]) throws
  /// https://developer.apple.com/documentation/mapkit/mkmapview/1452518-addoverlays
  func addAnnotationOverlays(annotations: [CircleAnnotation]) throws
  /// https://developer.apple.com/documentation/mapkit/mkmapview/1452130-removeannotations
  func removeAnnotations(identifiers: [String]) throws
  /// https://developer.apple.com/documentation/mapkit/mkmapview/1452719-removeoverlays
  func removeAnnotationOverlays(identifiers: [String]) throws
  /// https://developer.apple.com/documentation/mapkit/mkmapview/1452593-annotations
  func getAnnotations() throws -> [String]
  /// https://developer.apple.com/documentation/mapkit/mkmapview/1452309-showannotations
  func showAnnotations() throws
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class LocamusicDetailPageMapViewSetup {
  /// The codec used by LocamusicDetailPageMapView.
  static var codec: FlutterStandardMessageCodec { LocamusicDetailPageMapViewCodec.shared }
  /// Sets up an instance of `LocamusicDetailPageMapView` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: LocamusicDetailPageMapView?) {
    let setMapRegionChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.listen_to_music_by_location.LocamusicDetailPageMapView.setMapRegion", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setMapRegionChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let latitudeArg = args[0] as! Double
        let longitudeArg = args[1] as! Double
        let metersArg = args[2] as! Double
        do {
          try api.setMapRegion(latitude: latitudeArg, longitude: longitudeArg, meters: metersArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setMapRegionChannel.setMessageHandler(nil)
    }
    /// https://developer.apple.com/documentation/mapkit/mkmapview/1451889-addannotations
    let addAnnotationsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.listen_to_music_by_location.LocamusicDetailPageMapView.addAnnotations", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      addAnnotationsChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let annotationsArg = args[0] as! [CircleAnnotation]
        do {
          try api.addAnnotations(annotations: annotationsArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      addAnnotationsChannel.setMessageHandler(nil)
    }
    /// https://developer.apple.com/documentation/mapkit/mkmapview/1452518-addoverlays
    let addAnnotationOverlaysChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.listen_to_music_by_location.LocamusicDetailPageMapView.addAnnotationOverlays", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      addAnnotationOverlaysChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let annotationsArg = args[0] as! [CircleAnnotation]
        do {
          try api.addAnnotationOverlays(annotations: annotationsArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      addAnnotationOverlaysChannel.setMessageHandler(nil)
    }
    /// https://developer.apple.com/documentation/mapkit/mkmapview/1452130-removeannotations
    let removeAnnotationsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.listen_to_music_by_location.LocamusicDetailPageMapView.removeAnnotations", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      removeAnnotationsChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let identifiersArg = args[0] as! [String]
        do {
          try api.removeAnnotations(identifiers: identifiersArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      removeAnnotationsChannel.setMessageHandler(nil)
    }
    /// https://developer.apple.com/documentation/mapkit/mkmapview/1452719-removeoverlays
    let removeAnnotationOverlaysChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.listen_to_music_by_location.LocamusicDetailPageMapView.removeAnnotationOverlays", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      removeAnnotationOverlaysChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let identifiersArg = args[0] as! [String]
        do {
          try api.removeAnnotationOverlays(identifiers: identifiersArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      removeAnnotationOverlaysChannel.setMessageHandler(nil)
    }
    /// https://developer.apple.com/documentation/mapkit/mkmapview/1452593-annotations
    let getAnnotationsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.listen_to_music_by_location.LocamusicDetailPageMapView.getAnnotations", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getAnnotationsChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getAnnotations()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getAnnotationsChannel.setMessageHandler(nil)
    }
    /// https://developer.apple.com/documentation/mapkit/mkmapview/1452309-showannotations
    let showAnnotationsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.listen_to_music_by_location.LocamusicDetailPageMapView.showAnnotations", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      showAnnotationsChannel.setMessageHandler { _, reply in
        do {
          try api.showAnnotations()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      showAnnotationsChannel.setMessageHandler(nil)
    }
  }
}
private class MusicKitCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 128:
      return SongDetails.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class MusicKitCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? SongDetails {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class MusicKitCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return MusicKitCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return MusicKitCodecWriter(data: data)
  }
}

class MusicKitCodec: FlutterStandardMessageCodec {
  static let shared = MusicKitCodec(readerWriter: MusicKitCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol MusicKit {
  /// Status
  /// https://developer.apple.com/documentation/musickit/musicauthorization/status
  func requestPermission(completion: @escaping (Result<MusicAuthorizationStatus, Error>) -> Void)
  /// Status
  /// https://developer.apple.com/documentation/musickit/musicauthorization/status
  func currentPermissionStatus() throws -> MusicAuthorizationStatus
  func play(id: String) throws
  func songDetails(id: String, artworkSize: Int64, completion: @escaping (Result<SongDetails, Error>) -> Void)
  /// 音の出力先がビルトインスピーカーかどうか判定
  ///
  /// https://developer.apple.com/documentation/avfaudio/avaudiosession/port/1616561-builtinspeaker
  func audioSessionBuiltInSpeaker() throws -> Bool
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class MusicKitSetup {
  /// The codec used by MusicKit.
  static var codec: FlutterStandardMessageCodec { MusicKitCodec.shared }
  /// Sets up an instance of `MusicKit` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: MusicKit?) {
    /// Status
    /// https://developer.apple.com/documentation/musickit/musicauthorization/status
    let requestPermissionChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.listen_to_music_by_location.MusicKit.requestPermission", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      requestPermissionChannel.setMessageHandler { _, reply in
        api.requestPermission { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res.rawValue))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      requestPermissionChannel.setMessageHandler(nil)
    }
    /// Status
    /// https://developer.apple.com/documentation/musickit/musicauthorization/status
    let currentPermissionStatusChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.listen_to_music_by_location.MusicKit.currentPermissionStatus", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      currentPermissionStatusChannel.setMessageHandler { _, reply in
        do {
          let result = try api.currentPermissionStatus()
          reply(wrapResult(result.rawValue))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      currentPermissionStatusChannel.setMessageHandler(nil)
    }
    let playChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.listen_to_music_by_location.MusicKit.play", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      playChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let idArg = args[0] as! String
        do {
          try api.play(id: idArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      playChannel.setMessageHandler(nil)
    }
    let songDetailsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.listen_to_music_by_location.MusicKit.songDetails", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      songDetailsChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let idArg = args[0] as! String
        let artworkSizeArg = args[1] is Int64 ? args[1] as! Int64 : Int64(args[1] as! Int32)
        api.songDetails(id: idArg, artworkSize: artworkSizeArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      songDetailsChannel.setMessageHandler(nil)
    }
    /// 音の出力先がビルトインスピーカーかどうか判定
    ///
    /// https://developer.apple.com/documentation/avfaudio/avaudiosession/port/1616561-builtinspeaker
    let audioSessionBuiltInSpeakerChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.listen_to_music_by_location.MusicKit.audioSessionBuiltInSpeaker", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      audioSessionBuiltInSpeakerChannel.setMessageHandler { _, reply in
        do {
          let result = try api.audioSessionBuiltInSpeaker()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      audioSessionBuiltInSpeakerChannel.setMessageHandler(nil)
    }
  }
}
private class LocationManagerCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 128:
      return Region.fromList(self.readValue() as! [Any?])
    case 129:
      return Region.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class LocationManagerCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? Region {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else if let value = value as? Region {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class LocationManagerCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return LocationManagerCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return LocationManagerCodecWriter(data: data)
  }
}

class LocationManagerCodec: FlutterStandardMessageCodec {
  static let shared = LocationManagerCodec(readerWriter: LocationManagerCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol LocationManager {
  /// https://developer.apple.com/documentation/corelocation/cllocationmanager/1620562-requestwheninuseauthorization
  /// https://developer.apple.com/documentation/corelocation/cllocationmanager/1620551-requestalwaysauthorization
  func requestAuthorization(always: Bool) throws
  /// Status
  /// https://developer.apple.com/documentation/corelocation/clauthorizationstatus
  func currentPermissionStatus() throws -> AuthorizationStatus
  /// CLRegion.identifier
  /// https://developer.apple.com/documentation/corelocation/cllocationmanager/1423790-monitoredregions
  func monitoredRegions() throws -> [Region]
  /// https://developer.apple.com/documentation/corelocation/cllocationmanager/1423656-startmonitoring
  func startMonitoring(region: Region, completion: @escaping (Result<Void, Error>) -> Void)
  /// https://developer.apple.com/documentation/corelocation/cllocationmanager/1423840-stopmonitoring
  func stopMonitoring(region: Region) throws
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class LocationManagerSetup {
  /// The codec used by LocationManager.
  static var codec: FlutterStandardMessageCodec { LocationManagerCodec.shared }
  /// Sets up an instance of `LocationManager` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: LocationManager?) {
    /// https://developer.apple.com/documentation/corelocation/cllocationmanager/1620562-requestwheninuseauthorization
    /// https://developer.apple.com/documentation/corelocation/cllocationmanager/1620551-requestalwaysauthorization
    let requestAuthorizationChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.listen_to_music_by_location.LocationManager.requestAuthorization", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      requestAuthorizationChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let alwaysArg = args[0] as! Bool
        do {
          try api.requestAuthorization(always: alwaysArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      requestAuthorizationChannel.setMessageHandler(nil)
    }
    /// Status
    /// https://developer.apple.com/documentation/corelocation/clauthorizationstatus
    let currentPermissionStatusChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.listen_to_music_by_location.LocationManager.currentPermissionStatus", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      currentPermissionStatusChannel.setMessageHandler { _, reply in
        do {
          let result = try api.currentPermissionStatus()
          reply(wrapResult(result.rawValue))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      currentPermissionStatusChannel.setMessageHandler(nil)
    }
    /// CLRegion.identifier
    /// https://developer.apple.com/documentation/corelocation/cllocationmanager/1423790-monitoredregions
    let monitoredRegionsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.listen_to_music_by_location.LocationManager.monitoredRegions", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      monitoredRegionsChannel.setMessageHandler { _, reply in
        do {
          let result = try api.monitoredRegions()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      monitoredRegionsChannel.setMessageHandler(nil)
    }
    /// https://developer.apple.com/documentation/corelocation/cllocationmanager/1423656-startmonitoring
    let startMonitoringChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.listen_to_music_by_location.LocationManager.startMonitoring", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      startMonitoringChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let regionArg = args[0] as! Region
        api.startMonitoring(region: regionArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      startMonitoringChannel.setMessageHandler(nil)
    }
    /// https://developer.apple.com/documentation/corelocation/cllocationmanager/1423840-stopmonitoring
    let stopMonitoringChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.listen_to_music_by_location.LocationManager.stopMonitoring", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      stopMonitoringChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let regionArg = args[0] as! Region
        do {
          try api.stopMonitoring(region: regionArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      stopMonitoringChannel.setMessageHandler(nil)
    }
  }
}
private class LocationManagerDelegateCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 128:
      return Region.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class LocationManagerDelegateCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? Region {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class LocationManagerDelegateCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return LocationManagerDelegateCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return LocationManagerDelegateCodecWriter(data: data)
  }
}

class LocationManagerDelegateCodec: FlutterStandardMessageCodec {
  static let shared = LocationManagerDelegateCodec(readerWriter: LocationManagerDelegateCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents Flutter messages that can be called from Swift.
protocol LocationManagerDelegateProtocol {
  /// https://developer.apple.com/documentation/corelocation/cllocationmanagerdelegate/1423570-locationmanager
  func didDetermineState(region regionArg: Region, state stateArg: RegionState, completion: @escaping (Result<Void, FlutterError>) -> Void)
  /// https://developer.apple.com/documentation/corelocation/cllocationmanagerdelegate/3563956-locationmanagerdidchangeauthoriz
  func didChangeAuthorization(status statusArg: AuthorizationStatus, completion: @escaping (Result<Void, FlutterError>) -> Void)
  /// https://developer.apple.com/documentation/corelocation/cllocationmanagerdelegate/1423842-locationmanager
  /// https://developer.apple.com/documentation/corelocation/cllocationmanagerdelegate/1423720-locationmanager
  func didStartMonitoring(region regionArg: Region, error errorArg: String?, completion: @escaping (Result<Void, FlutterError>) -> Void)
}
class LocationManagerDelegate: LocationManagerDelegateProtocol {
  private let binaryMessenger: FlutterBinaryMessenger
  init(binaryMessenger: FlutterBinaryMessenger) {
    self.binaryMessenger = binaryMessenger
  }
  var codec: FlutterStandardMessageCodec {
    return LocationManagerDelegateCodec.shared
  }
  /// https://developer.apple.com/documentation/corelocation/cllocationmanagerdelegate/1423570-locationmanager
  func didDetermineState(region regionArg: Region, state stateArg: RegionState, completion: @escaping (Result<Void, FlutterError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.listen_to_music_by_location.LocationManagerDelegate.didDetermineState"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([regionArg, stateArg.rawValue] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  /// https://developer.apple.com/documentation/corelocation/cllocationmanagerdelegate/3563956-locationmanagerdidchangeauthoriz
  func didChangeAuthorization(status statusArg: AuthorizationStatus, completion: @escaping (Result<Void, FlutterError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.listen_to_music_by_location.LocationManagerDelegate.didChangeAuthorization"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([statusArg.rawValue] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  /// https://developer.apple.com/documentation/corelocation/cllocationmanagerdelegate/1423842-locationmanager
  /// https://developer.apple.com/documentation/corelocation/cllocationmanagerdelegate/1423720-locationmanager
  func didStartMonitoring(region regionArg: Region, error errorArg: String?, completion: @escaping (Result<Void, FlutterError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.listen_to_music_by_location.LocationManagerDelegate.didStartMonitoring"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([regionArg, errorArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
}
/// Generated protocol from Pigeon that represents Flutter messages that can be called from Swift.
protocol MapViewDelegateProtocol {
  /// on tap MKCircle
  func onTapCircle(viewType viewTypeArg: MapViewType, identifier identifierArg: String, completion: @escaping (Result<Void, FlutterError>) -> Void)
  /// on long pressed MKMapView
  func onLongPressedMap(viewType viewTypeArg: MapViewType, latitude latitudeArg: Double, longitude longitudeArg: Double, completion: @escaping (Result<Void, FlutterError>) -> Void)
  /// https://developer.apple.com/documentation/mapkit/mkmapviewdelegate/1452291-mapviewdidfinishloadingmap
  func mapViewDidFinishLoadingMap(viewType viewTypeArg: MapViewType, completion: @escaping (Result<Void, FlutterError>) -> Void)
}
class MapViewDelegate: MapViewDelegateProtocol {
  private let binaryMessenger: FlutterBinaryMessenger
  init(binaryMessenger: FlutterBinaryMessenger) {
    self.binaryMessenger = binaryMessenger
  }
  /// on tap MKCircle
  func onTapCircle(viewType viewTypeArg: MapViewType, identifier identifierArg: String, completion: @escaping (Result<Void, FlutterError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.listen_to_music_by_location.MapViewDelegate.onTapCircle"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger)
    channel.sendMessage([viewTypeArg.rawValue, identifierArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  /// on long pressed MKMapView
  func onLongPressedMap(viewType viewTypeArg: MapViewType, latitude latitudeArg: Double, longitude longitudeArg: Double, completion: @escaping (Result<Void, FlutterError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.listen_to_music_by_location.MapViewDelegate.onLongPressedMap"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger)
    channel.sendMessage([viewTypeArg.rawValue, latitudeArg, longitudeArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  /// https://developer.apple.com/documentation/mapkit/mkmapviewdelegate/1452291-mapviewdidfinishloadingmap
  func mapViewDidFinishLoadingMap(viewType viewTypeArg: MapViewType, completion: @escaping (Result<Void, FlutterError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.listen_to_music_by_location.MapViewDelegate.mapViewDidFinishLoadingMap"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger)
    channel.sendMessage([viewTypeArg.rawValue] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
}
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol OpenSettings {
  /// https://developer.apple.com/documentation/uikit/uiapplication/1623042-opensettingsurlstring
  func openSettings() throws
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class OpenSettingsSetup {
  /// The codec used by OpenSettings.
  /// Sets up an instance of `OpenSettings` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: OpenSettings?) {
    /// https://developer.apple.com/documentation/uikit/uiapplication/1623042-opensettingsurlstring
    let openSettingsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.listen_to_music_by_location.OpenSettings.openSettings", binaryMessenger: binaryMessenger)
    if let api = api {
      openSettingsChannel.setMessageHandler { _, reply in
        do {
          try api.openSettings()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      openSettingsChannel.setMessageHandler(nil)
    }
  }
}
