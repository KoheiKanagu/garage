// Copyright 2024 kingu.dev. All rights reserved.
// Autogenerated from Pigeon (v15.0.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)"
  ]
}

private func createConnectionError(withChannelName channelName: String) -> FlutterError {
  return FlutterError(code: "channel-error", message: "Unable to establish connection on channel: '\(channelName)'.", details: "")
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol MyMapHostApi {
  func setMapRegion(latitude: Double, longitude: Double, meters: Double) throws
  func addAnnotation(identifier: String, latitude: Double, longitude: Double, title: String, circleDistance: Double) throws
  func removeAnnotation(identifier: String) throws
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class MyMapHostApiSetup {
  /// The codec used by MyMapHostApi.
  /// Sets up an instance of `MyMapHostApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: MyMapHostApi?) {
    let setMapRegionChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.listen_to_music_by_location.MyMapHostApi.setMapRegion", binaryMessenger: binaryMessenger)
    if let api = api {
      setMapRegionChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let latitudeArg = args[0] as! Double
        let longitudeArg = args[1] as! Double
        let metersArg = args[2] as! Double
        do {
          try api.setMapRegion(latitude: latitudeArg, longitude: longitudeArg, meters: metersArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setMapRegionChannel.setMessageHandler(nil)
    }
    let addAnnotationChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.listen_to_music_by_location.MyMapHostApi.addAnnotation", binaryMessenger: binaryMessenger)
    if let api = api {
      addAnnotationChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let identifierArg = args[0] as! String
        let latitudeArg = args[1] as! Double
        let longitudeArg = args[2] as! Double
        let titleArg = args[3] as! String
        let circleDistanceArg = args[4] as! Double
        do {
          try api.addAnnotation(identifier: identifierArg, latitude: latitudeArg, longitude: longitudeArg, title: titleArg, circleDistance: circleDistanceArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      addAnnotationChannel.setMessageHandler(nil)
    }
    let removeAnnotationChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.listen_to_music_by_location.MyMapHostApi.removeAnnotation", binaryMessenger: binaryMessenger)
    if let api = api {
      removeAnnotationChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let identifierArg = args[0] as! String
        do {
          try api.removeAnnotation(identifier: identifierArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      removeAnnotationChannel.setMessageHandler(nil)
    }
  }
}
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol MyMusicHostApi {
  func requestPermission(completion: @escaping (Result<String, Error>) -> Void)
  func currentPermissionStatus() throws -> String
  func play(id: String) throws
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class MyMusicHostApiSetup {
  /// The codec used by MyMusicHostApi.
  /// Sets up an instance of `MyMusicHostApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: MyMusicHostApi?) {
    let requestPermissionChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.listen_to_music_by_location.MyMusicHostApi.requestPermission", binaryMessenger: binaryMessenger)
    if let api = api {
      requestPermissionChannel.setMessageHandler { _, reply in
        api.requestPermission() { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      requestPermissionChannel.setMessageHandler(nil)
    }
    let currentPermissionStatusChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.listen_to_music_by_location.MyMusicHostApi.currentPermissionStatus", binaryMessenger: binaryMessenger)
    if let api = api {
      currentPermissionStatusChannel.setMessageHandler { _, reply in
        do {
          let result = try api.currentPermissionStatus()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      currentPermissionStatusChannel.setMessageHandler(nil)
    }
    let playChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.listen_to_music_by_location.MyMusicHostApi.play", binaryMessenger: binaryMessenger)
    if let api = api {
      playChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let idArg = args[0] as! String
        do {
          try api.play(id: idArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      playChannel.setMessageHandler(nil)
    }
  }
}
/// Generated protocol from Pigeon that represents Flutter messages that can be called from Swift.
protocol MyFlutterApiProtocol {
  func onTapCircle(identifier identifierArg: String, completion: @escaping (Result<Void, FlutterError>) -> Void)
  func onLongPressedMap(latitude latitudeArg: Double, longitude longitudeArg: Double, completion: @escaping (Result<Void, FlutterError>) -> Void)
}
class MyFlutterApi: MyFlutterApiProtocol {
  private let binaryMessenger: FlutterBinaryMessenger
  init(binaryMessenger: FlutterBinaryMessenger){
    self.binaryMessenger = binaryMessenger
  }
  func onTapCircle(identifier identifierArg: String, completion: @escaping (Result<Void, FlutterError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.listen_to_music_by_location.MyFlutterApi.onTapCircle"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger)
    channel.sendMessage([identifierArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName:channelName)))
        return
      }
      if (listResponse.count > 1) {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterError(code: code, message: message, details: details)));
      } else {
        completion(.success(Void()))
      }
    }
  }
  func onLongPressedMap(latitude latitudeArg: Double, longitude longitudeArg: Double, completion: @escaping (Result<Void, FlutterError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.listen_to_music_by_location.MyFlutterApi.onLongPressedMap"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger)
    channel.sendMessage([latitudeArg, longitudeArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName:channelName)))
        return
      }
      if (listResponse.count > 1) {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterError(code: code, message: message, details: details)));
      } else {
        completion(.success(Void()))
      }
    }
  }
}
