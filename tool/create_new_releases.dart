// ignore_for_file: avoid_dynamic_calls

import 'dart:async';
import 'dart:convert';
import 'dart:io';

import 'package:grinder/grinder.dart';
import 'package:yaml_edit/yaml_edit.dart';

import 'utils.dart';

@Task(
  'Create new GitHub Releases',
)
Future<void> createNewReleases() async {
  // like ["listen_to_music_by_location"]
  final argPackages = argumentPackages();

  gitPullAndCheckoutMain();

  // 各パッケージのバージョンを上げる
  bump(argPackages);

  // コミットしてPRを作る
  createPr();

  // PRがマージされるまで待つ
  final mergeCommitSHA = await waitMergePr();

  // Releaseを作成する
  for (final package in argPackages) {
    final version = currentVersion(package).toString();

    // like "listen_to_music_by_location-v1.0.0+17"
    final newTagName = '$package-v$version';

    // like "listen_to_music_by_location-v1.0.0+17"
    final latestTagName = fetchLatestTagName(package);

    run(
      'gh',
      arguments: [
        'release',
        'create',
        newTagName,
        '--target',
        mergeCommitSHA,
        '--generate-notes',
        '--notes-start-tag',
        latestTagName!,
        '--draft',
      ],
    );

    // Release Notesを.mdとしてローカルに作成する
    createReleaseBody(
      newTagName,
      availableLocalizedLocales(package),
    );
  }
}

void createReleaseBody(
  String tag,
  Map<StoreName, List<String>> availableLocales,
) {
  final createdRelease = json.decode(
    run(
      'gh',
      arguments: [
        'release',
        'view',
        tag,
        '--json',
        'body',
      ],
    ),
  ) as Map<String, dynamic>;

  final createdReleaseBody = createdRelease['body'] as String;
  final createdReleaseUrl =
      'https://github.com/KoheiKanagu/garage/releases/tag/$tag';

  final releaseNotes = StringBuffer()
    ..writeln('# Release Notes')
    ..writeln(
      'This format is generated by https://github.com/KoheiKanagu/garage/blob/main/tool/create_new_releases.dart.',
    )
    ..writeln('```yaml');

  for (final store in StoreName.values) {
    if (availableLocales.containsKey(store)) {
      releaseNotes.writeln('${store.name}:');

      for (final locale in availableLocales[store]!) {
        releaseNotes.writeln('  $locale:');
        if (locale == 'ja' || locale == 'ja-JP') {
          releaseNotes
            ..writeln('    - 軽微な不具合を修正しました。')
            ..writeln('    - より詳しい変更点は $createdReleaseUrl をご覧ください。');
        } else {
          releaseNotes
            ..writeln('    - Fixed minor bugs.')
            ..writeln('    - For more details, check out $createdReleaseUrl');
        }
      }
    }
  }
  releaseNotes
    ..writeln('```')
    ..writeln()
    ..writeln(createdReleaseBody);

  final dir = Directory('releaseNotes')..createSync();
  final file = File('${dir.path}/$tag.md')
    ..writeAsStringSync(
      releaseNotes.toString(),
    );

  run(
    'open',
    arguments: [
      file.path,
    ],
  );
}

void createPr() {
  final releaseBranch = 'releases/${DateTime.now().toIso8601String()}';
  run(
    'git',
    arguments: [
      'checkout',
      '-b',
      releaseBranch,
    ],
  );

  run(
    'git',
    arguments: [
      'add',
      'packages/*/pubspec.yaml',
    ],
  );

  run(
    'git',
    arguments: [
      'commit',
      '-m',
      'chore: Bump packages',
    ],
  );

  run(
    'git',
    arguments: [
      'push',
      'origin',
      releaseBranch,
    ],
  );

  run(
    'gh',
    arguments: [
      'pr',
      'create',
      '--assignee',
      '@me',
      '--fill-first',
    ],
  );

  run(
    'gh',
    arguments: [
      'pr',
      'merge',
      '--auto',
      '--squash',
    ],
  );
}

void bump(List<String> packages) {
  for (final package in packages) {
    final pubspecFile = File('packages/$package/pubspec.yaml');
    final pubspec = YamlEditor(
      pubspecFile.readAsStringSync(),
    );

    final version = pubspec.parseAt(['version']).value as String;
    log('');
    log('current version: $version');

    final newVersion = splitVersion(version);

    newVersion.patch++;
    newVersion.build++;

    final newVersionString = newVersion.toString();
    log('new version: $newVersionString');
    log('');

    pubspec.update(['version'], newVersionString);

    pubspecFile.writeAsStringSync(
      pubspec.toString(),
    );
  }
}
